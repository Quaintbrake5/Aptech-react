import { __assign, __extends, __rest } from "tslib";
/**
 * @fileOverview Legend
 */
import React, { PureComponent } from 'react';
import _ from 'lodash';
import { isNumber } from 'recharts/lib/util/DataUtils';
import { DefaultLegendScrollableContent, } from './DefaultLegendScrollableContent';
function defaultUniqBy(entry) {
    return entry.value;
}
function getUniqPayload(option, payload) {
    if (option === true) {
        return _.uniqBy(payload, defaultUniqBy);
    }
    if (_.isFunction(option)) {
        return _.uniqBy(payload, option);
    }
    return payload;
}
function renderContent(content, props) {
    if (React.isValidElement(content)) {
        return React.cloneElement(content, props);
    }
    if (_.isFunction(content)) {
        return React.createElement(content, props);
    }
    var ref = props.ref, otherProps = __rest(props, ["ref"]);
    return React.createElement(DefaultLegendScrollableContent, __assign({}, otherProps));
}
var EPS = 1;
export var LegendScrollable = /** @class */ (function (_super) {
    __extends(LegendScrollable, _super);
    function LegendScrollable() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.wrapperNode = null;
        _this.state = {
            boxWidth: -1,
            boxHeight: -1,
        };
        return _this;
    }
    LegendScrollable.getWithHeight = function (item, chartWidth) {
        var layout = item.props.layout;
        if (layout === 'vertical' && isNumber(item.props.height)) {
            return {
                height: item.props.height,
            };
        }
        if (layout === 'horizontal') {
            return {
                width: item.props.width || chartWidth,
            };
        }
        return null;
    };
    LegendScrollable.prototype.componentDidMount = function () {
        this.updateBBox();
    };
    LegendScrollable.prototype.componentDidUpdate = function () {
        this.updateBBox();
    };
    LegendScrollable.prototype.getBBox = function () {
        if (this.wrapperNode && this.wrapperNode.getBoundingClientRect) {
            return this.wrapperNode.getBoundingClientRect();
        }
        return null;
    };
    LegendScrollable.prototype.getBBoxSnapshot = function () {
        var _a;
        var boxWidth = (_a = this.state, _a.boxWidth), boxHeight = _a.boxHeight;
        if (boxWidth >= 0 && boxHeight >= 0) {
            return { width: boxWidth, height: boxHeight };
        }
        return null;
    };
    LegendScrollable.prototype.getDefaultPosition = function (style) {
        var _a;
        var layout = (_a = this.props, _a.layout), align = _a.align, verticalAlign = _a.verticalAlign, margin = _a.margin, chartWidth = _a.chartWidth, chartHeight = _a.chartHeight;
        var hPos, vPos;
        if (!style ||
            ((style.left === undefined || style.left === null) && (style.right === undefined || style.right === null))) {
            if (align === 'center' && layout === 'vertical') {
                var box = this.getBBoxSnapshot() || { width: 0 };
                hPos = { left: ((chartWidth || 0) - box.width) / 2 };
            }
            else {
                hPos = align === 'right' ? { right: (margin && margin.right) || 0 } : { left: (margin && margin.left) || 0 };
            }
        }
        if (!style ||
            ((style.top === undefined || style.top === null) && (style.bottom === undefined || style.bottom === null))) {
            if (verticalAlign === 'middle') {
                var box = this.getBBoxSnapshot() || { height: 0 };
                vPos = { top: ((chartHeight || 0) - box.height) / 2 };
            }
            else {
                vPos =
                    verticalAlign === 'bottom' ? { bottom: (margin && margin.bottom) || 0 } : { top: (margin && margin.top) || 0 };
            }
        }
        return __assign(__assign({}, hPos), vPos);
    };
    LegendScrollable.prototype.updateBBox = function () {
        var _a;
        var boxWidth = (_a = this.state, _a.boxWidth), boxHeight = _a.boxHeight;
        var onBBoxUpdate = this.props.onBBoxUpdate;
        if (this.wrapperNode && this.wrapperNode.getBoundingClientRect) {
            var box_1 = this.wrapperNode.getBoundingClientRect();
            if (Math.abs(box_1.width - boxWidth) > EPS || Math.abs(box_1.height - boxHeight) > EPS) {
                this.setState({
                    boxWidth: box_1.width,
                    boxHeight: box_1.height,
                }, function () {
                    if (onBBoxUpdate) {
                        onBBoxUpdate(box_1);
                    }
                });
            }
        }
        else if (boxWidth !== -1 || boxHeight !== -1) {
            this.setState({
                boxWidth: -1,
                boxHeight: -1,
            }, function () {
                if (onBBoxUpdate) {
                    onBBoxUpdate(null);
                }
            });
        }
    };
    LegendScrollable.prototype.render = function () {
        var _a;
        var _this = this;
        var content = (_a = this.props, _a.content), width = _a.width, height = _a.height, wrapperStyle = _a.wrapperStyle, payloadUniqBy = _a.payloadUniqBy, payload = _a.payload;
        var outerStyle = __assign(__assign({ position: 'absolute', width: width || 'auto', height: height || 'auto' }, this.getDefaultPosition(wrapperStyle)), wrapperStyle);
        return (React.createElement("div", { className: 'recharts-legend-wrapper', style: outerStyle, ref: function (node) {
                _this.wrapperNode = node;
            } }, renderContent(content, __assign(__assign({}, this.props), { payload: getUniqPayload(payloadUniqBy, payload) }))));
    };
    LegendScrollable.displayName = 'Legend';
    LegendScrollable.defaultProps = {
        iconSize: 14,
        layout: 'horizontal',
        align: 'center',
        verticalAlign: 'bottom',
    };
    return LegendScrollable;
}(PureComponent));
//# sourceMappingURL=LegendScrollable.js.map